from ...utils.sunny.sunny_loader import SunnyLoader
from ...utils.sunny.sunny_df_manager import SunnyDataframeManager
from ...utils.sunny.sunny_container_manager import SunnyContainerManager
from ...utils.csv_manager import CSVManager
import os


class BaseSunnyService:
    def __init__(self, pl_column_mapping):
        self.pl_column_mapping = pl_column_mapping

    def process_file(self, file_path, output_dir):
        """
        Processus principal pour g√©rer le fichier Excel et g√©n√©rer les CSV.
        """
        dataframe = self._prepare_dataframe(file_path)
        if dataframe is None:
            print("‚ùå ERREUR: Impossible de traiter le fichier (fichier vide ou erreur de lecture)")
            return None

        containers = self._group_containers(dataframe)

        generated_files = []

        for index, container in enumerate(containers, start=1):
            container_dataframe = self._filter_container(dataframe, container)
            output_csv_path = self._process_container(container_dataframe, output_dir, index, len(containers) == 1)

            if output_csv_path:
                generated_files.append(output_csv_path)

        # Filtrer les fichiers valides uniquement
        generated_files = [file for file in generated_files if file is not None]

        if not generated_files:
            print("‚ùå ERREUR: Aucun fichier valide g√©n√©r√©.")
            return None

        print(f"‚úÖ Fichiers g√©n√©r√©s: {generated_files}")
        return generated_files


    def _prepare_dataframe(self, file_path):
        dataframe = SunnyLoader.load_excel_file(file_path)

        if dataframe is None or dataframe.empty:  # V√©rification renforc√©e
            print("‚ùå ERREUR: Le fichier Excel est vide ou non lisible !")
            return None

        print("üìå Aper√ßu des donn√©es charg√©es :", dataframe.head())

        SunnyDataframeManager.normalize_columns(dataframe)
        SunnyDataframeManager.validate_columns(dataframe, self.pl_column_mapping)
        SunnyDataframeManager.add_missing_columns(dataframe, self.pl_column_mapping)

        return dataframe



    def _group_containers(self, dataframe):
        """
        Grouper les conteneurs pr√©sents dans le DataFrame.
        """
        return SunnyContainerManager.group_by_container(dataframe)

    def _filter_container(self, dataframe, container):
        """
        Filtre les donn√©es pour un conteneur sp√©cifique.
        """
        return SunnyContainerManager.filter_by_container(dataframe, "Container", container)

    
    def _process_container(self, container_dataframe, output_dir, index, single_container):
        """
        Traite un conteneur et g√©n√®re un fichier CSV correspondant.
        """
        if container_dataframe is None or container_dataframe.empty:
            print(f"‚ö†Ô∏è Conteneur {index}: Aucun enregistrement trouv√©, le fichier CSV ne sera pas g√©n√©r√©.")
            return None

        print(f"üìå Traitement du conteneur {index}...")

        extracted_data = self._extract_data(container_dataframe)
        if not extracted_data:
            print(f"‚ö†Ô∏è Conteneur {index}: Aucune donn√©e extraite, fichier CSV non g√©n√©r√©.")
            return None  

        exporter_ref = self._get_exporter_ref(container_dataframe)
        full_exporter_ref = exporter_ref if single_container else f"{exporter_ref}_{index}"

        for row in extracted_data:
            row["Exporter Ref"] = full_exporter_ref

        output_csv_path = self._generate_csv_filename(output_dir, exporter_ref, index)

        try:
            self._write_to_csv(output_csv_path, extracted_data)
        except Exception as e:
            print(f"‚ùå ERREUR: √âchec de l'√©criture du fichier {output_csv_path}. Raison: {e}")
            return None  

        if not os.path.exists(output_csv_path) or os.path.getsize(output_csv_path) == 0:
            print(f"‚ùå ERREUR: Le fichier {output_csv_path} est vide ou n'a pas √©t√© correctement g√©n√©r√©.")
            return None

        print(f"‚úÖ CSV g√©n√©r√© avec succ√®s : {output_csv_path}")
        return output_csv_path




    def _extract_data(self, container_dataframe):
        """
        Extraction des donn√©es d'un conteneur. (√Ä impl√©menter dans la classe d√©riv√©e.)
        """
        raise NotImplementedError("La m√©thode _extract_data doit √™tre impl√©ment√©e dans une classe d√©riv√©e.")

    def _get_exporter_ref(self, container_dataframe):
        """
        R√©cup√®re la r√©f√©rence de l'exportateur pour nommer le fichier.
        """
        if "Ref nr" not in container_dataframe.columns:
            print("‚ö†Ô∏è 'Ref nr' non trouv√© dans les colonnes, valeur par d√©faut utilis√©e.")
            return "Unknown"

        return container_dataframe["Ref nr"].dropna().iloc[0] if not container_dataframe["Ref nr"].dropna().empty else "Unknown"


    def _generate_csv_filename(self, output_dir, exporter_ref, index):
        """
        G√©n√®re le nom du fichier CSV.
        """
        fournisseur = self.csv_settings.get("Fournisseur", "G√©n√©rique")
        subfolder = os.path.join(output_dir, fournisseur)
        os.makedirs(subfolder, exist_ok=True)
        return os.path.join(subfolder, f"PL_{exporter_ref}_{index}.csv")

    def _write_to_csv(self, output_csv_path, extracted_data):
        """
        √âcrit les donn√©es extraites dans un fichier CSV.
        """
        if not extracted_data or len(extracted_data) == 0:
            print(f"‚ö†Ô∏è Aucune donn√©e √† √©crire dans {output_csv_path}, fichier non g√©n√©r√©.")
            return None

        try:
            # ‚ùå Supprime le param√®tre 'encoding'
            CSVManager.write_csv(output_csv_path, extracted_data)
        except Exception as e:
            print(f"‚ùå ERREUR: Impossible d'√©crire le fichier CSV ({e})")
            return None

        if not os.path.exists(output_csv_path) or os.path.getsize(output_csv_path) == 0:
            print(f"‚ùå ERREUR: Le fichier {output_csv_path} est vide ou n'a pas √©t√© correctement g√©n√©r√©.")
            return None

        print(f"‚úÖ CSV g√©n√©r√© avec succ√®s : {output_csv_path}")
        return output_csv_path



